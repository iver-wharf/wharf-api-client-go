package wharfapi

import (
	"fmt"
	"strings"
)

// Problem can be serialized into JSON and its fields follow the problem schema
// defined by IETF RFC-7807.
type Problem struct {
	// Type is a URI reference that identifies the problem type. The IETF
	// RFC-7807 specification encourages that, when dereferenced, it provide
	// human-readable documentation for the problem type (e.g., using HTML).
	// When this member is not present, its value is assumed to be
	// "about:blank".
	Type string `json:"type" example:"https://iver-wharf.github.io/#/prob/build/run/invalid-input"`

	// Title is a short, human-readable summary of the problem type.
	// It SHOULD NOT change from occurrence to ocurrence of the problem, except
	// for purposes of localization.
	//
	// Recommended to be kept brief, have proper punctuation, and be
	// capitalized, like a short sentence.
	Title string `json:"title" example:"Invalid input variable for build."`

	// Status is the HTTP status code generated by the origin server for this
	// occurrence of the problem.
	Status int `json:"status" example:"400"`

	// Detail is a human-readable explanation specific to this occurrence of the
	// problem.
	//
	// Recommended to have proper punctuation, and be capitalized,
	// like a sentence. Compared to Title this field may stretch on and be
	// longer.
	Detail string `json:"detail" example:"Build requires input variable 'myInput' to be of type 'string', but got 'int' instead."`

	// Instance is a URI reference that identifies the specific occurrence of
	// the problem. It may or may not yield further information if dereferenced.
	Instance string `json:"instance" example:"/projects/12345/builds/run/6789"`

	// Error is an extended field for the regular Problem model defined in
	// RFC-7807. It contains the string message of the error (if any).
	Errors []string `json:"errors" example:"strconv.ParseUint: parsing \"-1\": invalid syntax"`
}

func (r Problem) Error() error {
	trimmedTitle := strings.TrimRight(firstRuneLower(r.Title), ",.!; ")
	return ProblemError{
		Message: fmt.Sprintf("%s: %s", trimmedTitle, strings.Join(r.Errors, "; ")),
		Problem: r,
	}
}

// ProblemError is a class that conforms with the "error" interface and is
// returned by any HTTP request for which a problem response was sent.
type ProblemError struct {
	Problem
	Message string
}

func (e ProblemError) Error() string {
	return e.Message
}
